{"version":3,"sources":["components/ContactsContainer.tsx","components/Headline.tsx","components/HeadlineContainer.tsx","assets/fantalytix.png","assets/findb.png","assets/fitj.png","assets/splendor-react.png","components/Project.tsx","components/ProjectsContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ContactsContainer","email","contactsData","github","linkedin","Container","id","style","marginBottom","Header","as","fontSize","marginTop","href","Button","target","Headline","text","inverted","size","HeadlineContainer","Segment","textAlign","minHeight","padding","vertical","Project","props","title","description","url","img","gridColumns","Grid","Column","width","disabled","paddingTop","Image","src","alt","basic","color","undefined","paddingBottom","reverse","ProjectsContainer","data","projectData","imgDict","findbImg","splendorImg","fantalytixImg","fitjImg","fluid","map","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.568e523b.chunk.js","sourcesContent":["import { Button, Container, Header } from \"semantic-ui-react\";\r\nimport contactsData from \"../data/contacts.json\";\r\n\r\nfunction ContactsContainer() {\r\n  const { email, github, linkedin } = contactsData;\r\n\r\n  return (\r\n    <Container id='contacts' style={{ marginBottom: 300 }}>\r\n      <Header\r\n        as='h1'\r\n        style={{\r\n          fontSize: '4em',\r\n          marginTop: '3em',\r\n        }}\r\n      >\r\n        Contact me\r\n      </Header>\r\n      <Header\r\n        as='h2'\r\n        style={{ fontSize: '1.5em' }}\r\n      >\r\n        <a href={`'mailto: ${email}`}>{email}</a>\r\n      </Header>\r\n      <Button as='a' target='_blank' href={github}>Github</Button>\r\n      <Button as='a' target='_blank' href={linkedin}>LinkedIn</Button>\r\n    </Container >\r\n  );\r\n}\r\n\r\nexport default ContactsContainer;","import { Button, Container, Header } from \"semantic-ui-react\";\r\n\r\nfunction Headline() {\r\n  return (\r\n    <Container text>\r\n      <Header\r\n        as='h1'\r\n        style={{\r\n          fontSize: '4em',\r\n          marginTop: '3em',\r\n        }}\r\n        inverted\r\n      >\r\n        Hi, I'm Kevin Lau\r\n      </Header>\r\n      <Header\r\n        as='h2'\r\n        style={{ fontSize: '1.5em' }}\r\n        inverted\r\n      >\r\n        Software Development Engineer\r\n      </Header>\r\n      <Button\r\n        size='large'\r\n        as='a'\r\n        href='#projects'\r\n      >\r\n        View my work\r\n      </Button>\r\n      <Button\r\n        size='large'\r\n        as='a'\r\n        href='#contacts'\r\n      >\r\n        Contact me\r\n      </Button>\r\n    </Container >\r\n  );\r\n}\r\n\r\nexport default Headline;","import { Segment } from \"semantic-ui-react\";\r\nimport Headline from \"./Headline\";\r\n\r\nfunction HeadlineContainer() {\r\n  return (\r\n    <Segment\r\n      inverted\r\n      textAlign='center'\r\n      style={{\r\n        minHeight: 800,\r\n        padding: '1em 0em'\r\n      }}\r\n      vertical\r\n    >\r\n      <Headline />\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default HeadlineContainer;","export default __webpack_public_path__ + \"static/media/fantalytix.c403bc58.png\";","export default __webpack_public_path__ + \"static/media/findb.e07c5fbb.png\";","export default __webpack_public_path__ + \"static/media/fitj.e019fbba.png\";","export default __webpack_public_path__ + \"static/media/splendor-react.3a379dfe.png\";","import { Button, Container, Grid, Header, Image, Segment } from \"semantic-ui-react\";\r\n\r\ninterface ProjectProps {\r\n  title: string;\r\n  description: string;\r\n  url: string;\r\n  img: string;\r\n  inverted: true | false;\r\n}\r\n\r\nfunction Project(props: ProjectProps) {\r\n  const { title, description, url, img, inverted } = props;\r\n\r\n  const textGridColumn = (\r\n    <Grid.Column width={8}>\r\n      <Header\r\n        as='h1'\r\n        style={{\r\n          fontSize: '4em',\r\n          marginTop: '3em',\r\n        }}\r\n        inverted={inverted}\r\n      >\r\n        {title}\r\n      </Header>\r\n      <Header\r\n        as='h2'\r\n        style={{ fontSize: '1.5em' }}\r\n        inverted={inverted}\r\n      >\r\n        {description}\r\n      </Header>\r\n      <Button\r\n        as='a'\r\n        target='_blank'\r\n        href={url}\r\n        inverted={inverted}\r\n        disabled={url === \"\"}\r\n      >\r\n        Visit\r\n      </Button>\r\n    </Grid.Column>\r\n  );\r\n\r\n  const imgGridColumn = (\r\n    <Grid.Column width={8}>\r\n      <Container style={{ paddingTop: 150 }}>\r\n        <Image src={img} alt={title + \" img\"} />\r\n      </Container>\r\n    </Grid.Column>\r\n  );\r\n\r\n  const gridColumns = [textGridColumn, imgGridColumn];\r\n\r\n  return (\r\n    <Segment\r\n      basic\r\n      inverted={inverted}\r\n      color={inverted ? \"blue\" : undefined}\r\n      style={{ paddingBottom: 200 }}\r\n    >\r\n      <Container>\r\n        <Grid>\r\n          {inverted ? gridColumns.reverse() : gridColumns}\r\n        </Grid>\r\n      </Container>\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default Project;","import { Container } from \"semantic-ui-react\";\r\nimport fantalytixImg from \"../assets/fantalytix.png\";\r\nimport findbImg from \"../assets/findb.png\";\r\nimport fitjImg from \"../assets/fitj.png\";\r\nimport splendorImg from \"../assets/splendor-react.png\";\r\nimport projectData from \"../data/projects.json\";\r\nimport Project from \"./Project\";\r\n\r\nfunction ProjectsContainer() {\r\n  const data = projectData;\r\n  let imgDict: { [title: string]: string } = {\r\n    \"FinDB\": findbImg,\r\n    \"Splendor emulator\": splendorImg,\r\n    \"Fantalytix\": fantalytixImg,\r\n    \"Fit-j\": fitjImg,\r\n  };\r\n\r\n  return (\r\n    <Container id='projects' fluid>\r\n      {data.map(({ title, description, url }, index) => {\r\n        return (\r\n          <Project\r\n            title={title}\r\n            description={description}\r\n            url={url}\r\n            img={imgDict[title]}\r\n            inverted={index % 2 === 1}\r\n          />\r\n        );\r\n      })}\r\n    </Container >\r\n  );\r\n}\r\n\r\nexport default ProjectsContainer;","import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport './App.css';\r\nimport ContactsContainer from './components/ContactsContainer';\r\nimport HeadlineContainer from './components/HeadlineContainer';\r\nimport ProjectsContainer from './components/ProjectsContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <Container fluid>\r\n      <HeadlineContainer />\r\n      <ProjectsContainer />\r\n      <ContactsContainer />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}